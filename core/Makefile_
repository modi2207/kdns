# ifeq ($(RTE_SDK),)
# $(error "Please define RTE_SDK environment variable")
# endif

# DEPDIR = $(SRCDIR)/../deps

# INCLUDE += -I$(DEPDIR)/libjansson/src

# # Default target, can be overriden by command line or environment
# include $(RTE_SDK)/mk/rte.vars.mk
# binary name
# LIB = libkdns.a

# # all source are stored in SRCS-y
# SRCS-y := dns.c \
# domain_store.c \
# packet.c \
# query.c \
# radtree.c \
# util.c \
# view.c \
# zone.c 
# SYMLINK-y-include += buffer.h \
# dns.h \
# domain_store.h \
# kdns.h\
# packet.h \
# query.h \
# radtree.h \
# util.h \
# view.h \
# zone.h 

# CFLAGS += $(INCLUDE)

# CFLAGS += $(WERROR_FLAGS) -g -O2 -Wno-cast-qual

# include $(RTE_SDK)/mk/rte.extlib.mk


ifeq ($(RTE_SDK),)
$(error "Please define RTE_SDK environment variable")
endif

SRCDIR=/home/chirag/Desktop/kdns/core

DEPDIR = $(SRCDIR)/../deps

INCLUDE += -I$(DEPDIR)/libjansson/src
# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2010-2014 Intel Corporation

# binary name
LIB = libkdns.a


# all source are stored in SRCS-y
SRCS-y := dns.c \
domain_store.c \
packet.c \
query.c \
radtree.c \
util.c \
view.c \
zone.c 
SYMLINK-y-include += buffer.h \
dns.h \
domain_store.h \
kdns.h\
packet.h \
query.h \
radtree.h \
util.h \
view.h \
zone.h 

PKGCONF ?= pkg-config

# Build using pkg-config variables if possible
ifneq ($(shell $(PKGCONF) --exists libdpdk && echo 0),0)
$(error "no installation of DPDK found")
endif

all: shared
.PHONY: shared static
shared: build/$(LIB)
	ln -sf $(LIB) build/$(LIB)
# static: build/$(APP)-static
# 	ln -sf $(APP)-static build/$(APP)
CFLAGS += $(INCLUDE)

PC_FILE := $(shell $(PKGCONF) --path libdpdk 2>/dev/null)
CFLAGS += -O3 $(shell $(PKGCONF) --cflags libdpdk)
LDFLAGS_SHARED = $(shell $(PKGCONF) --libs libdpdk)
LDFLAGS_STATIC = $(shell $(PKGCONF) --static --libs libdpdk)

ifeq ($(MAKECMDGOALS),static)
# check for broken pkg-config
ifeq ($(shell echo $(LDFLAGS_STATIC) | grep 'whole-archive.*l:lib.*no-whole-archive'),)
$(warning "pkg-config output list does not contain drivers between 'whole-archive'/'no-whole-archive' flags.")
$(error "Cannot generate statically-linked binaries with this version of pkg-config")
endif
endif

CFLAGS += -DALLOW_EXPERIMENTAL_API
CFLAGS += $(WERROR_FLAGS) -g -O2 -Wno-cast-qual -nostartfiles
build/$(LIB): $(SRCS-y) Makefile $(PC_FILE) | build
	$(CC) $(CFLAGS) $(SRCS-y) -o $@ $(LDFLAGS) $(LDFLAGS_SHARED)

# build/$(APP)-static: $(SRCS-y) Makefile $(PC_FILE) | build
# 	$(CC) $(CFLAGS) $(SRCS-y) -o $@ $(LDFLAGS) $(LDFLAGS_STATIC)

build:
	@mkdir -p $@

.PHONY: clean
clean:
	rm -f build/$(LIB) build/$(LIB)-static build/$(LIB)-shared
	test -d build && rmdir -p build || true
